=content_for(:head) do
  / %script{:src => "http://api.maps.yahoo.com/ajaxymap?v=3.0&appid=euzuro-openlayers"}
  / %script{:src => "http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.2&mkt=en-us"}
  %script{:src => "http://maps.google.com/maps/api/js?sensor=false"}
  = javascript_include_tag 'home_index_map'

.pagehead
  %p
    Select the hazard and the exposure maps to compute map of estimated fatalities

.container  
  #builder
    .hazard
      %h2 Select natural hazard
      %select.hazard_layers
        %option{:value => "select", :selected => "selected"}Please select
        = unless Hazard.layernames.nil?
          =Hazard.layernames.each do |hz| 
            %option{:value => "#{hz}"}=hz.humanize
      %p.help
        Select map representing hazard level
    .exposure
      %h2 Select exposure
      %select.exposure_layers
        %option{:value => "select", :selected => "selected"}Please select
        = unless Exposure.layernames.nil?
          =Exposure.layernames.each do |e| 
            %option{:value => "#{e}"}=e.humanize
      %p.help
        Select map of elements exposed to the natural hazard
    .map
      %h2 Select an area
      %a.toggle{:href => "#"} Turn on selection mode
    .action
      %button{:type => 'submit'} Run simulation
      // %button.disabled{:type => 'submit'} Run simulation
      .loading
        %img{:src => '/images/spinner.gif'}
        %p Running simulation
      .results
        / %h2 Impact results
        / %p.impact_layername
        .links
          %a.download{:href => '#'} Download impact data
          %a.ge{:href => '#'} View in Google Earth

/ .message
/   .container
/     .buttons
/       %a.done{:href => "#"} Done
/       or
/       %a.cancel{:href => "#"} cancel      
/     Drag to select an area on the map below

#map-container
#map-statusbar
  .container
    / .toggle_fullscreen
    /   Full Screen Map    
    .current_bounds
      Current bounds 
      %span.bounding_box 
       
:javascript

  // Set URL of your WebSocketMain.swf here:
  WEB_SOCKET_SWF_LOCATION = "/javascripts/web-socket-js/WebSocketMain.swf";
  // Set this to dump debug message from Flash to console.log:
  WEB_SOCKET_DEBUG = true;
  var ws;

  function init_websocket() {
    // Connect to Web Socket.
    // Change host/port here to your own Web Socket server.
    ws = new WebSocket("ws://#{WEBSOCKET_SERVER_CONFIG["host"]}:#{WEBSOCKET_SERVER_CONFIG["port"]}/");

    // Set event handlers.
    ws.onopen = function() {
      console.log("onopen");
    };
    ws.onmessage = function(e) {
      // e.data contains received string.      
      results = JSON.parse(e.data);
      if (results.impact != null) {
        // $('p.timestamp').html(results.impact.timestamp);
        // $('p.impact_layername').html(results.impact.impact_layername);
        $('a.ge').attr('href', results.impact.kml);
        $('a.download').attr('href', results.impact.download_link);
        $('.loading').hide();    
        $('.results').show();
        $('button').removeClass("disabled");        
        var impact = new OpenLayers.Layer.WMS(results.impact.impact_layername.humanize(),
                   results.impact.wms,
                    {
                      layers: "impact:"+results.impact.impact_layername,
                      transparent: "true",
                      format: "image/png"
                    },
                   {isBaseLayer: false, visibility: true, opacity: 0.5}
                  ); 
        map.addLayer(impact);        
      };
      // console.log(e.data);
    };
    ws.onclose = function() {
      console.log("onclose");
    };
    ws.onerror = function() {
      console.log("onerror");
    };
  }

  $(document).ready(function(){
    init_home_index_map();
    init_websocket();
    init_box_control();    
  });

  $('button').click(function() {
    // validate Riat
    if(Riat.olBounds().getWidth() > 10 ){
      alert("Extents are too big please zoom in");
      return null;
    }
    Riat.hazard = $('.hazard select').val();
    Riat.exposure = $('.exposure select').val();
    // console.log(Riat.bounding_box + "\n" + Riat.hazard + "\n" + Riat.exposure);
    if (Riat.hazard == "select" || Riat.exposure == "select" ) {
      alert("Pleases make sure you have selected Hazard and Exposure layers");
      return null;
    }
    $(this).addClass("disabled");
    $('.results').hide();    
    $('.loading').show();
    encoded_riat = JSON.stringify(Riat);
    // console.log(encoded_riat);
    ws.send(encoded_riat);
  })

  $('a.toggle').toggle(function() {
    $(this).addClass("disabled");    
    $('a.toggle').html("Turn off selection mode");
    boxControl.box.activate();
  }, function() {
    $(this).removeClass("disabled");    
    $('a.toggle').html("Turn on selection mode");
    boxControl.box.deactivate();
    for (var i=0; i < boxLayer.features.length; i++) {
      boxLayer.destroyFeatures(boxLayer.features[i]);
    };    
  });
  
  $('select.hazard_layers').change(function () {
    if ($(this).val() != "select") {
      re = new RegExp($(this).val()+"(.*)", "i")
      l = map.getLayersByName(re)[0]
      l.setVisibility(false);
      l.setVisibility(true);
    }
    else if($(this).val() == "select")
    {
      for (var i=0; i < hazard_layers.length; i++) {
        l = map.getLayersByName(hazard_layers[i])[0]
        l.setVisibility(false);
      };
    };    
  });
  
  $('select.exposure_layers').change(function () {
    if ($(this).val() != "select") {
      re = new RegExp($(this).val()+".*")
      l = map.getLayersByName(re)[0]
      l.setVisibility(false);
      l.setVisibility(true);
    }
    else if($(this).val() == "select")
    {
      for (var i=0; i < exposure_layers.length; i++) {
        l = map.getLayersByName(exposure_layers[i])[0]
        l.setVisibility(false);
      };
    };
    
  });
  